class Solution {
public:
    vector<int> threeEqualParts(vector<int>& A) {
        // O(n)
        int n = A.size();
        int numsofone = 0;
        for(auto a: A) if(a) numsofone++;
        if(numsofone == 0) return vector<int>{0, n - 1};
        if(numsofone % 3 != 0) return vector<int>{-1, -1};
        
        int k = numsofone / 3; // 每个数包括的1的个数
        vector<int> v; // 第一个数，第二个数，第三个数的起点（1开头）
        int cnt = 0;
        for(int i = 0; i < n; i++) {
            if(A[i]) {
                if(cnt == 0) v.push_back(i);
                cnt++;
            }
            if(cnt == k) cnt = 0;
        }
        // 三个数从第一个1开始，每一位要相等，直到第三个数结束
        // 第一个数和第二个数，第二个数和第三个数直接可以有多余的0
        int i = v[0] + n - v[2] - 1, j = v[1] + n - v[2]; // 数字从第一个1开始的长度：n - v[2]
        while(v[2] < n && A[v[0]] == A[v[1]] && A[v[0]] == A[v[2]]) {
            for(int k = 0; k < 3; k++) v[k]++;
        }
        if(v[2] == n) return vector<int>{i, j};
        return vector<int>{-1, -1};   //前两个数的0有多没关系，但是不够，会有v[0]=1,v[2]=0
    }
};
